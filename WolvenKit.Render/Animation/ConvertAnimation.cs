using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using WolvenKit.CR2W;
using WolvenKit.CR2W.Types;
using Newtonsoft.Json;
using IrrlichtLime;
using IrrlichtLime.Core;
using IrrlichtLime.Scene;

namespace WolvenKit.Render
{
    public class ConvertAnimation
    {
        private CR2WFile w2AnimFile;
        public CR2WFile W2AnimFile
        {
            get { return w2AnimFile; }
            set { w2AnimFile = value; }
        }
        /// <summary>
        /// </summary>
        /// <param name="args"></param>
        public ConvertAnimation()
        {
        }

        public static byte[] Combine(byte[] first, byte[] second)
        {
            byte[] ret = new byte[first.Length + second.Length];
            Buffer.BlockCopy(first, 0, ret, 0, first.Length);
            Buffer.BlockCopy(second, 0, ret, first.Length, second.Length);
            return ret;
        }

        public CVariable animVar(string type, string name, CR2WFile file, CVariable parent)
        {
            CVariable newvar = CR2WTypeManager.Create(type, name, file, parent, false);
            if (newvar == null)
                throw new Exception("Nope");
            //newvar.Type = type;
            return newvar;
        }

        void createAnimationSet()
        {
            var SkeletalAnimationSet = W2AnimFile.CreateChunk("CSkeletalAnimationSet");
            CVariable animPointerArr = animVar("array:2,0,ptr:CSkeletalAnimationSetEntry", "animations", SkeletalAnimationSet.cr2w, SkeletalAnimationSet.data);
            SkeletalAnimationSet.data.AddVariable(animPointerArr);
            //(animPointerArr as CArray).AddVariable(animVar("ptr:CSkeletalAnimationSetEntry", null, SkeletalAnimationSet.cr2w).SetValue(2));
            SkeletalAnimationSet.data.AddVariable(
                animVar("SAnimationBufferStreamingOption", "Streaming option", SkeletalAnimationSet.cr2w, SkeletalAnimationSet.data).SetValue("ABSO_FullyStreamable"));
        }
        void createChunks(int startIndex, int bufferNumber)
        {
            try
            {
                var SkeletalAnimationSet = w2AnimFile.Chunks[0];
                CSkeletalAnimationSet set = w2AnimFile.Chunks[0].data as CSkeletalAnimationSet;
                set.Animations = new CArray<CPtr<CSkeletalAnimationSetEntry>>(set.cr2w, set, "animations") {Elementtype = "ptr:CSkeletalAnimationSetEntry" };
                set.Animations.AddVariable(new CPtr<CSkeletalAnimationSetEntry>(set.cr2w, set.Animations, "")
                {
                    Reference = SkeletalAnimationSet.cr2w.Chunks[startIndex + 2],
                });

                // create chunks
                var SkeletalAnimationSetEntry = W2AnimFile.CreateChunk("CSkeletalAnimationSetEntry");
                var SkeletalAnimation = W2AnimFile.CreateChunk("CSkeletalAnimation");
                var bitbuff = W2AnimFile.CreateChunk("CAnimationBufferBitwiseCompressed");

                // CSkeletalAnimationSetEntry
                var setentry = SkeletalAnimation.data as CSkeletalAnimationSetEntry;
                setentry.Animation = new CPtr<CSkeletalAnimation>(SkeletalAnimationSetEntry.cr2w, setentry, "animation")
                {
                    Reference = SkeletalAnimation.cr2w.Chunks[startIndex + 4],
                };

                // SkeletalAnimation start
                var anim = SkeletalAnimation.data as CSkeletalAnimation;
                anim.Name = new CName(SkeletalAnimation.cr2w, anim, "name");
                anim.AnimBuffer = new CPtr<IAnimationBuffer>(SkeletalAnimation.cr2w, anim, "animBuffer")
                {
                    Reference = SkeletalAnimation.cr2w.Chunks[startIndex + 4],
                };
                anim.FramesPerSecond = (CFloat)new CFloat(SkeletalAnimation.cr2w, anim, "framesPerSecond")
                {
                    val = 30F,
                };
                anim.Duration = (CFloat)new CFloat(SkeletalAnimation.cr2w, anim, "duration")
                {
                    val = 1F,
                };

                //bitbuff
                CAnimationBufferBitwiseCompressed buffer = bitbuff.data as CAnimationBufferBitwiseCompressed;
                buffer.Version = (CUInt32)new CUInt32(bitbuff.cr2w, buffer, "version").SetValue((uint)2);


                CVariable bones = animVar("array:129,0,SAnimationBufferBitwiseCompressedBoneTrack", "bones", bitbuff.cr2w, bitbuff.data);
                bitbuff.data.AddVariable(bones);
                for (int i = 0; i < 93; i++)
                {
                    CVariable newvar = animVar("SAnimationBufferBitwiseCompressedBoneTrack", "", bitbuff.cr2w, bones);

                    CVariable position = animVar("SAnimationBufferBitwiseCompressedData", "position", bitbuff.cr2w, newvar);
                    CVariable orientation = animVar("SAnimationBufferBitwiseCompressedData", "orientation", bitbuff.cr2w, newvar);
                    CVariable scale = animVar("SAnimationBufferBitwiseCompressedData", "scale", bitbuff.cr2w, newvar);
                    
                    position.AddVariable(animVar("Float", "dt", bitbuff.cr2w, position).SetValue(0.03333334F));
                    position.AddVariable(animVar("Int8", "compression", bitbuff.cr2w, position).SetValue((sbyte)2));
                    position.AddVariable(animVar("Uint16", "numFrames", bitbuff.cr2w, position));
                    position.AddVariable(animVar("Uint32", "dataAddr", bitbuff.cr2w, position));
                    position.AddVariable(animVar("Uint32", "dataAddrFallback", bitbuff.cr2w, position));

                    orientation.AddVariable(animVar("Float", "dt", bitbuff.cr2w, orientation).SetValue(0.03333334F));
                    orientation.AddVariable(animVar("Int8", "compression", bitbuff.cr2w, orientation).SetValue((sbyte)2));
                    orientation.AddVariable(animVar("Uint16", "numFrames", bitbuff.cr2w, orientation));
                    orientation.AddVariable(animVar("Uint32", "dataAddr", bitbuff.cr2w, orientation));
                    orientation.AddVariable(animVar("Uint32", "dataAddrFallback", bitbuff.cr2w, orientation));

                    scale.AddVariable(animVar("Float", "dt", bitbuff.cr2w, scale).SetValue(0.03333334F));
                    scale.AddVariable(animVar("Int8", "compression", bitbuff.cr2w, scale).SetValue((sbyte)2));
                    scale.AddVariable(animVar("Uint16", "numFrames", bitbuff.cr2w, scale));
                    scale.AddVariable(animVar("Uint32", "dataAddr", bitbuff.cr2w, scale));
                    scale.AddVariable(animVar("Uint32", "dataAddrFallback", bitbuff.cr2w, scale));

                    newvar.AddVariable(position);
                    newvar.AddVariable(orientation);
                    newvar.AddVariable(scale);
                    (bones as CArray<SAnimationBufferBitwiseCompressedBoneTrack>).AddVariable(newvar);
                }

                buffer.Data = new CByteArray(bitbuff.cr2w, buffer, "data");
                buffer.FallbackData = new CByteArray(bitbuff.cr2w, buffer, "fallbackData");
                buffer.DeferredData = new DeferredDataBuffer(bitbuff.cr2w, buffer, "deferredData")
                {
                    Bufferdata = new CInt16(bitbuff.cr2w, buffer.DeferredData, "Bufferdata") { val = (short)bufferNumber},
                };
                buffer.OrientationCompressionMethod = new CEnum<Enums.SAnimationBufferOrientationCompressionMethod>(bitbuff.cr2w, buffer, "orientationCompressionMethod")
                {
                    WrappedEnum = Enums.SAnimationBufferOrientationCompressionMethod.ABOCM_PackIn48bits
                };

                buffer.Duration = (CFloat)new CFloat(bitbuff.cr2w, buffer, "duration").SetValue(1F);
                buffer.NumFrames = (CUInt32)new CUInt32(bitbuff.cr2w, buffer, "numFrames").SetValue((uint)30);
                buffer.Dt = (CFloat)new CFloat(bitbuff.cr2w, buffer, "dt").SetValue(0.03333334F);

                buffer.StreamingOption = new CEnum<Enums.SAnimationBufferStreamingOption>(bitbuff.cr2w, buffer, "streamingOption")
                { 
                    WrappedEnum = Enums.SAnimationBufferStreamingOption.ABSO_NonStreamable 
                };

                buffer.HasRefIKBones = (CBool)new CBool(bitbuff.cr2w, buffer, "hasRefIKBones").SetValue(true);
            }
            catch (InvalidChunkTypeException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }


        public void Load(List<string> files, string savefileName)
        {
            byte[] data;
            //data = File.ReadAllBytes(@"D:\w3.modding\animation\template.w2anims"); //need a better way to generate a working blank CR2WFile
            data = new byte[] { 0x43, 0x52, 0x32, 0x57, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x41, 0x7E, 0xB6, 0xDD, 0x97, 0x04, 0x48,
                0xC9, 0x12, 0x00, 0x79, 0x1E, 0x00, 0x00, 0x79, 0x1E, 0x00, 0x00, 0x2B, 0xD2, 0xC3, 0x65, 0x04, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x79, 
                0x10, 0x00, 0x00, 0xE6, 0xC9, 0xB7, 0x4F, 0x19, 0x11, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 0x97, 0xD3, 0x3A, 0xBD, 0x09, 0x17, 0x00, 0x00, 0x02, 
                0x00, 0x00, 0x00, 0xFB, 0xC3, 0xCA, 0x6D, 0x19, 0x17, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x4B, 0xBB, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x17, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0xAF, 0x21, 0x75, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x53, 0x6B, 0x65, 
                0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x65, 0x74, 0x00, 0x61, 0x6E, 0x69, 0x6D, 0x61, 0x74, 
                0x69, 0x6F, 0x6E, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x70, 0x74, 0x72, 0x3A, 0x43, 0x53, 0x6B, 0x65, 0x6C, 
                0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x65, 0x74, 0x45, 0x6E, 0x74, 0x72, 0x79, 0x00, 0x43, 0x53, 
                0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x53, 0x65, 0x74, 0x45, 0x6E, 0x74, 0x72, 0x79, 
                0x00, 0x61, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x70, 0x74, 0x72, 0x3A, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 
                0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x61, 0x6C, 0x41, 0x6E, 0x69, 0x6D, 0x61, 
                0x74, 0x69, 0x6F, 0x6E, 0x00, 0x6E, 0x61, 0x6D, 0x65, 0x00, 0x43, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x63, 0x5F, 0x6D, 0x61, 0x67, 0x65, 0x5F, 0x63, 
                0x61, 0x73, 0x74, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x61, 0x6E, 0x69, 0x6D, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00, 0x70, 0x74, 0x72, 0x3A, 
                0x49, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00, 0x43, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 
                0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 
                0x65, 0x64, 0x00, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x55, 0x69, 0x6E, 0x74, 0x33, 0x32, 0x00, 0x62, 0x6F, 0x6E, 0x65, 0x73, 0x00, 
                0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x31, 0x32, 0x39, 0x2C, 0x30, 0x2C, 0x53, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 
                0x66, 0x66, 0x65, 0x72, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x6F, 0x6E, 
                0x65, 0x54, 0x72, 0x61, 0x63, 0x6B, 0x00, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x53, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 
                0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 
                0x64, 0x44, 0x61, 0x74, 0x61, 0x00, 0x64, 0x74, 0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x00, 0x63, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 
                0x6F, 0x6E, 0x00, 0x49, 0x6E, 0x74, 0x38, 0x00, 0x6E, 0x75, 0x6D, 0x46, 0x72, 0x61, 0x6D, 0x65, 0x73, 0x00, 0x55, 0x69, 0x6E, 0x74, 0x31, 0x36, 
                0x00, 0x6F, 0x72, 0x69, 0x65, 0x6E, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x64, 0x61, 0x74, 0x61, 0x41, 0x64, 0x64, 0x72, 0x00, 0x64, 0x61, 
                0x74, 0x61, 0x41, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6C, 0x6C, 0x62, 0x61, 0x63, 0x6B, 0x00, 0x73, 0x63, 0x61, 0x6C, 0x65, 0x00, 0x66, 0x61, 0x6C, 
                0x6C, 0x62, 0x61, 0x63, 0x6B, 0x44, 0x61, 0x74, 0x61, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x31, 0x32, 0x39, 0x2C, 0x30, 0x2C, 0x49, 0x6E, 
                0x74, 0x38, 0x00, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x00, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 
                0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x00, 0x6F, 0x72, 0x69, 0x65, 0x6E, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x43, 0x6F, 
                0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x00, 0x53, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 
                0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4F, 0x72, 0x69, 0x65, 0x6E, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x43, 0x6F, 0x6D, 0x70, 0x72, 
                0x65, 0x73, 0x73, 0x69, 0x6F, 0x6E, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x00, 0x41, 0x42, 0x4F, 0x43, 0x4D, 0x5F, 0x50, 0x61, 0x63, 0x6B, 0x49, 
                0x6E, 0x34, 0x38, 0x62, 0x69, 0x74, 0x73, 0x57, 0x00, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x69, 0x6E, 0x67, 0x4F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 
                0x00, 0x53, 0x41, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x69, 
                0x6E, 0x67, 0x4F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x41, 0x42, 0x53, 0x4F, 0x5F, 0x46, 0x75, 0x6C, 0x6C, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 
                0x6D, 0x61, 0x62, 0x6C, 0x65, 0x00, 0x68, 0x61, 0x73, 0x52, 0x65, 0x66, 0x49, 0x4B, 0x42, 0x6F, 0x6E, 0x65, 0x73, 0x00, 0x42, 0x6F, 0x6F, 0x6C, 
                0x00, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6F, 0x6E, 0x64, 0x00, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6F, 
                0x6E, 0x00, 0x63, 0x5F, 0x6D, 0x61, 0x67, 0x65, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x43, 0x45, 0x78, 0x74, 
                0x41, 0x6E, 0x69, 0x6D, 0x53, 0x6F, 0x75, 0x6E, 0x64, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x4E, 0x61, 0x6D, 0x65, 
                0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x63, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x00, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6D, 
                0x65, 0x00, 0x61, 0x6E, 0x69, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x45, 0x76, 0x65, 
                0x6E, 0x74, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x41, 0x6E, 0x73, 0x69, 0x00, 0x6D, 0x61, 0x78, 0x44, 0x69, 0x73, 
                0x74, 0x61, 0x6E, 0x63, 0x65, 0x00, 0x62, 0x6F, 0x6E, 0x65, 0x00, 0x74, 0x6F, 0x72, 0x73, 0x6F, 0x00, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 
                0x73, 0x54, 0x6F, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x53, 0x74, 0x72, 0x69, 
                0x6E, 0x67, 0x41, 0x6E, 0x73, 0x69, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x46, 0x6F, 0x6F, 0x74, 0x73, 0x74, 0x65, 0x70, 0x45, 
                0x76, 0x65, 0x6E, 0x74, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x66, 0x6F, 0x6F, 0x74, 0x73, 0x74, 0x65, 0x70, 0x73, 0x00, 0x72, 0x5F, 
                0x66, 0x6F, 0x6F, 0x74, 0x00, 0x6C, 0x5F, 0x66, 0x6F, 0x6F, 0x74, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x66, 0x66, 0x65, 
                0x63, 0x74, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x7B, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5F, 0x73, 0x6F, 0x75, 
                0x6E, 0x64, 0x73, 0x20, 0x2D, 0x20, 0x77, 0x32, 0x61, 0x6E, 0x69, 0x6D, 0x65, 0x76, 0x7D, 0x2E, 0x66, 0x78, 0x00, 0x65, 0x66, 0x66, 0x65, 0x63, 
                0x74, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x72, 0x68, 0x00, 0x63, 
                0x5F, 0x6D, 0x61, 0x67, 0x65, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x45, 
                0x41, 0x6E, 0x69, 0x6D, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x45, 0x41, 0x5F, 0x53, 0x74, 0x6F, 0x70, 
                0x00, 0x63, 0x5F, 0x6D, 0x61, 0x67, 0x65, 0x5F, 0x74, 0x65, 0x6C, 0x65, 0x70, 0x6F, 0x72, 0x74, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 
                0x65, 0x78, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x41, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x20, 0x62, 0x6F, 0x77, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 
                0x20, 0x66, 0x72, 0x6F, 0x6E, 0x74, 0x20, 0x6F, 0x66, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x5F, 0x31, 0x00, 0x6D, 0x6F, 0x74, 
                0x69, 0x6F, 0x6E, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x70, 0x74, 0x72, 0x3A, 0x49, 0x4D, 0x6F, 0x74, 0x69, 0x6F, 
                0x6E, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x43, 0x4C, 0x69, 0x6E, 0x65, 0x4D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x45, 
                0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x32, 0x00, 0x66, 0x72, 0x61, 0x6D, 0x65, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 
                0x32, 0x2C, 0x30, 0x2C, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x00, 0x64, 0x65, 0x6C, 0x74, 0x61, 0x54, 0x69, 0x6D, 0x65, 0x73, 0x00, 0x61, 0x72, 0x72, 
                0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x55, 0x69, 0x6E, 0x74, 0x38, 0x00, 0x66, 0x6C, 0x61, 0x67, 0x73, 0x00, 0x55, 0x69, 0x6E, 0x74, 0x38, 
                0x00, 0x41, 0x63, 0x74, 0x6F, 0x72, 0x73, 0x20, 0x62, 0x6F, 0x77, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x66, 0x72, 0x6F, 0x6E, 0x74, 0x20, 
                0x6F, 0x66, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x5F, 0x32, 0x00, 0x42, 0x6C, 0x61, 0x6E, 0x6B, 0x61, 0x20, 0x69, 0x6E, 0x6A, 
                0x75, 0x72, 0x65, 0x64, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x20, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x29, 0x20, 0x74, 0x69, 0x65, 0x64, 0x20, 0x74, 
                0x6F, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x69, 0x72, 0x2C, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 
                0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x61, 0x6C, 
                0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 
                0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x74, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x74, 0x61, 0x72, 
                0x74, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 
                0x61, 0x6E, 0x64, 0x20, 0x74, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x53, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 
                0x73, 0x73, 0x20, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x20, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x20, 0x73, 0x70, 0x65, 0x6C, 0x6C, 
                0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x53, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x20, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 
                0x61, 0x20, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x20, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x53, 0x6F, 0x72, 0x63, 
                0x65, 0x72, 0x65, 0x73, 0x73, 0x20, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x20, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x20, 0x73, 0x70,
                0x65, 0x6C, 0x6C, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x65, 0x74, 
                0x74, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x6E, 0x63, 0x69, 0x6F, 0x75, 0x73, 0x2C, 0x20, 0x64, 0x69, 0x7A, 0x7A, 0x79, 0x5F, 0x6C, 0x6F, 0x6F, 
                0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 
                0x6E, 0x63, 0x69, 0x6F, 0x75, 0x73, 0x2C, 0x20, 0x64, 0x69, 0x7A, 0x7A, 0x79, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x67, 0x65, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x63, 0x6F, 0x6E, 0x63, 0x69, 0x6F, 0x75, 0x73, 0x2C, 0x20, 0x64, 0x69, 0x7A, 0x7A, 0x79, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x74, 0x20, 0x66, 0x75, 0x6E, 0x65, 0x72, 0x61, 0x6C, 0x20, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6C, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x74, 0x20, 0x66, 0x75, 0x6E, 0x65, 0x72, 0x61, 0x6C, 0x20, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6C, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x61, 0x74, 0x20, 
                0x66, 0x75, 0x6E, 0x65, 0x72, 0x61, 0x6C, 0x20, 0x72, 0x69, 0x74, 0x75, 0x61, 0x6C, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x68, 0x79, 0x70, 0x6E, 0x6F, 0x74, 0x69, 0x7A, 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x68, 0x79, 0x70, 0x6E, 0x6F, 0x74, 0x69, 0x7A, 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x68, 0x79, 0x70, 0x6E, 0x6F, 0x74, 0x69, 0x7A, 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6F, 0x6E, 
                0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x6D, 0x61, 0x6E, 0x20, 0x75, 0x6E, 0x63, 0x6F, 0x6E, 0x63, 0x69, 0x6F, 0x75, 0x73, 0x20, 0x6F, 0x6E, 0x20, 0x66, 0x6C, 0x6F, 0x6F, 0x72, 0x00, 0x57, 0x6F, 0x6D, 0x65, 0x6E, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x20, 0x73, 0x61, 0x75, 0x6E, 0x61, 0x5F, 0x31, 0x00, 0x57, 0x6F, 0x6D, 0x65, 0x6E, 0x20, 0x73, 0x69, 0x74, 0x74, 0x69, 0x6E, 0x67, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x20, 0x73, 0x61, 0x75, 0x6E, 0x61, 0x5F, 0x32, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x31, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 
                0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x31, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x31, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x32, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x63, 
                0x6C, 0x61, 0x70, 0x00, 0x6C, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x32, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x32, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x33, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 
                0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x33, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x57, 0x6F, 0x72, 0x6B, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x74, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x20, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6E, 0x63, 0x65, 0x20, 0x33, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x62, 0x6C, 0x69, 0x6E, 0x64, 0x5F, 0x66, 0x69, 0x6C, 0x69, 0x70, 0x70, 0x61, 0x5F, 0x63, 0x6F, 0x6D, 0x62, 0x61, 0x74, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x62, 0x6C, 0x69, 0x6E, 0x64, 0x5F, 0x66, 0x69, 0x6C, 0x69, 0x70, 0x70, 0x61, 0x5F, 0x63, 0x6F, 0x6D, 0x62, 0x61, 0x74, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x62, 0x6C, 0x69, 0x6E, 0x64, 0x5F, 0x66, 0x69, 0x6C, 0x69, 0x70, 0x70, 0x61, 0x5F, 0x63, 0x6F, 0x6D, 0x62, 0x61, 0x74, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x71, 
                0x34, 0x30, 0x33, 0x5F, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x63, 0x68, 0x61, 0x6E, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x63, 0x75, 0x66, 0x66, 0x65, 0x64, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x63, 0x75, 0x66, 0x66, 0x65, 0x64, 0x5F, 0x6C, 0x65, 0x66, 0x74, 0x5F, 0x74, 0x75, 0x72, 0x6E, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x61, 0x6C, 0x6B, 0x69, 0x6E, 0x67, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x63, 0x75, 0x66, 0x66, 0x65, 0x64, 0x5F, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5F, 0x74, 0x75, 0x72, 0x6E, 0x00, 0x71, 0x32, 0x30, 0x33, 0x5F, 
                0x63, 0x69, 0x72, 0x69, 0x5F, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6B, 0x65, 0x64, 0x5F, 0x62, 0x79, 0x5F, 0x77, 0x69, 0x6C, 0x64, 0x20, 0x68, 0x75, 0x6E, 0x74, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x49, 0x74, 0x65, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x69, 0x74, 0x65, 0x6D, 0x5F, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6F, 0x72, 0x79, 0x00, 0x73, 0x74, 0x65, 0x65, 0x6C, 0x73, 0x77, 0x6F, 0x72, 0x64, 0x00, 0x69, 0x74, 0x65, 0x6D, 0x4E, 0x61, 0x6D, 0x65, 0x5F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x61, 0x6C, 0x00, 0x71, 0x32, 0x30, 0x33, 
                0x20, 0x47, 0x68, 0x6F, 0x73, 0x74, 0x20, 0x48, 0x75, 0x6D, 0x61, 0x6E, 0x20, 0x53, 0x77, 0x6F, 0x72, 0x64, 0x00, 0x45, 0x49, 0x74, 0x65, 0x6D, 0x41, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x49, 0x41, 0x5F, 0x4D, 0x6F, 0x75, 0x6E, 0x74, 0x54, 0x6F, 0x52, 0x69, 0x67, 0x68, 0x74, 0x48, 0x61, 0x6E, 0x64, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x4D, 0x6F, 0x6E, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6C, 0x75, 0x65, 0x41, 0x6E, 0x69, 0x6D, 0x53, 0x74, 0x61, 0x72, 0x74, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x49, 0x74, 0x65, 0x6D, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x00, 0x67, 0x68, 0x6F, 0x73, 0x74, 0x00, 0x45, 0x49, 0x74, 0x65, 0x6D, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x41, 0x63, 
                0x74, 0x69, 0x6F, 0x6E, 0x00, 0x49, 0x45, 0x41, 0x5F, 0x53, 0x74, 0x6F, 0x70, 0x00, 0x4D, 0x6F, 0x6E, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6C, 0x75, 0x65, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x6E, 0x64, 0x00, 0x71, 0x32, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x73, 0x6F, 0x75, 0x72, 0x61, 0x6E, 0x64, 0x65, 0x64, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x31, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x32, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 
                0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x33, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x71, 0x32, 0x30, 0x31, 0x5F, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x72, 0x75, 0x6E, 0x6B, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x6F, 0x72, 0x6B, 0x5F, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x65, 0x65, 0x69, 0x6E, 0x67, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x77, 0x6F, 0x72, 0x6B, 0x5F, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 
                0x65, 0x65, 0x69, 0x6E, 0x67, 0x5F, 0x30, 0x32, 0x00, 0x71, 0x32, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x00, 0x6D, 0x61, 0x72, 0x67, 0x65, 0x72, 0x69, 0x74, 0x61, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x31, 0x00, 0x6D, 0x61, 0x72, 0x67, 0x65, 0x72, 0x69, 0x74, 0x61, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x65, 0x6E, 0x64, 0x00, 0x6D, 0x61, 0x72, 0x67, 0x65, 0x72, 0x69, 0x74, 0x61, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x74, 0x72, 0x69, 0x73, 0x73, 0x5F, 0x6E, 
                0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x65, 0x6E, 0x64, 0x00, 0x74, 0x72, 0x69, 0x73, 0x73, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x31, 0x00, 0x74, 0x72, 0x69, 0x73, 0x73, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 
                0x76, 0x65, 0x73, 0x5F, 0x65, 0x6E, 0x64, 0x00, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x5F, 0x30, 0x31, 0x00, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x6E, 0x61, 0x67, 0x6C, 0x66, 0x61, 0x72, 0x5F, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x73, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5F, 0x6C, 0x6F, 0x77, 0x5F, 0x6C, 0x79, 0x69, 0x6E, 0x67, 0x5F, 0x64, 0x6F, 0x77, 0x6E, 0x5F, 0x64, 0x65, 0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5F, 0x69, 0x64, 0x6C, 0x65, 0x00, 0x71, 0x34, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x74, 0x75, 0x72, 0x6E, 0x5F, 0x77, 0x68, 0x65, 0x65, 0x6C, 
                0x00, 0x67, 0x65, 0x72, 0x61, 0x6C, 0x74, 0x5F, 0x62, 0x65, 0x69, 0x6E, 0x67, 0x5F, 0x70, 0x75, 0x6C, 0x6C, 0x65, 0x64, 0x5F, 0x65, 0x6E, 0x64, 0x00, 0x67, 0x65, 0x72, 0x61, 0x6C, 0x74, 0x5F, 0x62, 0x65, 0x69, 0x6E, 0x67, 0x5F, 0x70, 0x75, 0x6C, 0x6C, 0x65, 0x64, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x67, 0x65, 0x72, 0x61, 0x6C, 0x74, 0x5F, 0x62, 0x65, 0x69, 0x6E, 0x67, 0x5F, 0x70, 0x75, 0x6C, 0x6C, 0x65, 0x64, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x73, 0x5F, 0x76, 0x6F, 0x64, 0x6B, 0x61, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x00, 0x72, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x00, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5F, 0x69, 0x74, 0x65, 0x6D, 0x00, 0x68, 0x65, 0x61, 
                0x64, 0x00, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x5F, 0x69, 0x74, 0x65, 0x6D, 0x00, 0x73, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x73, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x73, 0x6F, 0x72, 0x63, 0x65, 0x72, 0x65, 0x73, 0x73, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x5F, 0x73, 0x74, 0x6F, 0x70, 0x00, 0x71, 0x31, 0x30, 0x33, 0x5F, 0x6D, 0x61, 0x6E, 0x5F, 
                0x67, 0x65, 0x72, 0x61, 0x6C, 0x74, 0x5F, 0x67, 0x75, 0x73, 0x6C, 0x61, 0x72, 0x5F, 0x62, 0x65, 0x6C, 0x6C, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5F, 0x62, 0x65, 0x6C, 0x6C, 0x00, 0x71, 0x34, 0x30, 0x33, 0x5F, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x6D, 0x65, 0x74, 0x65, 0x6F, 0x72, 0x00, 0x45, 0x71, 0x75, 0x69, 0x70, 0x49, 0x74, 0x65, 0x6D, 0x4C, 0x00, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6D, 0x4C, 0x00, 0x48, 0x69, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6D, 0x4C, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 
                0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x67, 0x72, 0x61, 0x66, 0x65, 0x63, 0x75, 0x6C, 0x6C, 0x79, 0x5F, 0x6C, 0x6F, 0x6F, 0x70, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x67, 0x72, 0x61, 0x66, 0x65, 0x63, 0x75, 0x6C, 0x6C, 0x79, 0x5F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x4E, 0x50, 0x43, 0x20, 0x28, 0x66, 0x65, 0x6D, 0x61, 0x6C, 0x65, 0x29, 0x20, 0x73, 0x74, 0x61, 0x6E, 0x64, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x64, 0x72, 0x69, 0x6E, 0x6B, 0x69, 0x6E, 0x67, 0x20, 0x67, 0x72, 0x61, 0x66, 0x65, 0x63, 0x75, 0x6C, 0x6C, 0x79, 0x5F, 
                0x73, 0x74, 0x6F, 0x70, 0x00, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x69, 0x64, 0x6C, 0x65, 0x5F, 0x68, 0x61, 0x6E, 0x64, 0x63, 0x75, 0x66, 0x66, 0x65, 0x64, 0x00, 0x41, 0x42, 0x4F, 0x43, 0x4D, 0x5F, 0x41, 0x73, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x5F, 0x58, 0x59, 0x5A, 0x53, 0x69, 0x67, 0x6E, 0x65, 0x64, 0x57, 0x49, 0x6E, 0x4C, 0x61, 0x73, 0x74, 0x42, 0x69, 0x74, 0x00, 0x73, 0x71, 0x32, 0x30, 0x32, 0x5F, 0x79, 0x65, 0x6E, 0x6E, 0x65, 0x66, 0x65, 0x72, 0x5F, 0x63, 0x61, 0x73, 0x74, 0x69, 0x6E, 0x67, 0x5F, 0x73, 0x70, 0x65, 0x6C, 0x6C, 0x00, 0x65, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x73, 0x00, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3A, 0x32, 0x2C, 0x30, 0x2C, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x3A, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 
                0x45, 0x76, 0x65, 0x6E, 0x74, 0x73, 0x46, 0x69, 0x6C, 0x65, 0x00, 0x43, 0x45, 0x78, 0x74, 0x41, 0x6E, 0x69, 0x6D, 0x45, 0x76, 0x65, 0x6E, 0x74, 0x73, 0x46, 0x69, 0x6C, 0x65, 0x00, 0x73, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x6F, 0x6E, 0x00, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x3A, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x6F, 0x6E, 0x00, 0x43, 0x53, 0x6B, 0x65, 0x6C, 0x65, 0x74, 0x6F, 0x6E, 0x00, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x69, 0x6E, 0x67, 0x20, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x63, 0x69, 0x72, 0x69, 0x5F, 0x64, 0x61, 0x6E, 0x63, 0x65, 0x00, 0x41, 0x42, 0x53, 0x4F, 0x5F, 0x4E, 0x6F, 0x6E, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x61, 0x62, 0x6C, 0x65, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x5C, 0x63, 0x68, 0x61, 0x72, 
                0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x5C, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5C, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5C, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5F, 0x73, 0x6F, 0x75, 0x6E, 0x64, 0x73, 0x2E, 0x77, 0x32, 0x61, 0x6E, 0x69, 0x6D, 0x65, 0x76, 0x00, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x5C, 0x62, 0x61, 0x73, 0x65, 0x5F, 0x65, 0x6E, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5C, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x5C, 0x77, 0x6F, 0x6D, 0x61, 0x6E, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x2E, 0x77, 0x32, 0x72, 0x69, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD1, 0x55, 0x2C, 0xC1, 0x17, 0x00, 0x00, 0x00, 0xDE, 0x9C, 0x8C, 0x69, 0x22, 0x00, 0x00, 0x00, 0x6A, 
                0x5A, 0x04, 0x83, 0x4B, 0x00, 0x00, 0x00, 0xCF, 0x77, 0xEF, 0x80, 0x66, 0x00, 0x00, 0x00, 0x67, 0x3C, 0x16, 0xFE, 0x70, 0x00, 0x00, 0x00, 0x83, 0xBD, 0xF4, 0x9E, 0x87, 0x00, 0x00, 0x00, 0x07, 0xF0, 0x68, 0xB9, 0x9A, 0x00, 0x00, 0x00, 0x12, 0xF1, 0xE5, 0x37, 0x9F, 0x00, 0x00, 0x00, 0xDB, 0x5B, 0x10, 0xF1, 0xA5, 0x00, 0x00, 0x00, 0xF0, 0xF3, 0x70, 0x92, 0xB6, 0x00, 0x00, 0x00, 0xDE, 0x8E, 0x1C, 0x09, 0xC1, 0x00, 0x00, 0x00, 0xE8, 0x95, 0xB7, 0xBA, 0xD6, 0x00, 0x00, 0x00, 0xF4, 0x16, 0xA8, 0x83, 0xF8, 0x00, 0x00, 0x00, 0xB5, 0xD7, 0xF5, 0x7B, 0x00, 0x01, 0x00, 0x00, 0x64, 0x6D, 0x59, 
                0x16, 0x07, 0x01, 0x00, 0x00, 0x5C, 0xC8, 0x16, 0x46, 0x0D, 0x01, 0x00, 0x00, 0xB2, 0xD2, 0x4A, 0x67, 0x44, 0x01, 0x00, 0x00, 0xBE, 0xD9, 0xD7, 0xEF, 0x4D, 0x01, 0x00, 0x00, 0x3C, 0x8E, 0xD6, 0xB9, 0x73, 0x01, 0x00, 0x00, 0xDF, 0x1C, 0x34, 0x69, 0x76, 0x01, 0x00, 0x00, 0x3F, 0x80, 0xAD, 0x94, 0x7C, 0x01, 0x00, 0x00, 0xAF, 0x56, 0x47, 0x9D, 0x88, 0x01, 0x00, 0x00, 0x36, 0x4A, 0x89, 0xC9, 0x8D, 0x01, 0x00, 0x00, 0x03, 0x0E, 0x91, 0x87, 0x97, 0x01, 0x00, 0x00, 0x56, 0x74, 0x3E, 0x49, 0x9E, 0x01, 0x00, 0x00, 0xF3, 0x27, 0xC7, 0xAD, 0xAA, 0x01, 0x00, 0x00, 0xB6, 0x11, 0x2E, 0x04, 0xB3, 0x01, 0x00, 0x00, 0x10, 0xD5, 0x65, 0x25, 0xC4, 0x01, 0x00, 0x00, 0xE3, 0xC5, 0xE1, 0x04, 0xCA, 0x01, 0x00, 0x00, 0xB9, 0x0D, 0x62, 0x32, 0xD7, 0x01, 0x00, 0x00, 0xEF, 0xF9, 0xAC, 0x2C, 
                0xE8, 0x01, 0x00, 0x00, 0x4E, 0x35, 0xA2, 0xB7, 0xF5, 0x01, 0x00, 0x00, 0x8C, 0xA0, 0x90, 0x41, 0x08, 0x02, 0x00, 0x00, 0x1C, 0x90, 0xF5, 0xA5, 0x25, 0x02, 0x00, 0x00, 0xE1, 0x92, 0x9C, 0x55, 0x52, 0x02, 0x00, 0x00, 0x7D, 0xBB, 0x77, 0xA4, 0x66, 0x02, 0x00, 0x00, 0x02, 0x2B, 0x20, 0x0D, 0x76, 0x02, 0x00, 0x00, 0x09, 0xF2, 0x6D, 0xCA, 0x96, 0x02, 0x00, 0x00, 0x3D, 0x15, 0x90, 0x71, 0xAB, 0x02, 0x00, 0x00, 0xA9, 0x33, 0x93, 0x11, 0xB9, 0x02, 0x00, 0x00, 0x67, 0xD6, 0xE1, 0x10, 0xBE, 0x02, 0x00, 0x00, 0x5E, 0xE0, 0xCC, 0x45, 0xCE, 0x02, 0x00, 0x00, 0x77, 0x5B, 0x6E, 0x07, 0xD7, 0x02, 0x00, 0x00, 0xBE, 0x0C, 0xE2, 0xC5, 0xE9, 0x02, 0x00, 0x00, 0x8B, 0x63, 0xAA, 0x68, 0xFC, 0x02, 0x00, 0x00, 0xF4, 0x40, 0xDD, 0xD7, 0x06, 0x03, 0x00, 0x00, 0xAA, 0x25, 0x7A, 0xC1, 0x15, 
                0x03, 0x00, 0x00, 0x0A, 0xAD, 0x65, 0xC5, 0x1F, 0x03, 0x00, 0x00, 0x5A, 0xC3, 0xFE, 0xF8, 0x2D, 0x03, 0x00, 0x00, 0x25, 0x6E, 0xD2, 0x51, 0x3C, 0x03, 0x00, 0x00, 0x45, 0x91, 0x58, 0x83, 0x47, 0x03, 0x00, 0x00, 0xA2, 0xCF, 0x07, 0x4E, 0x53, 0x03, 0x00, 0x00, 0x1D, 0x14, 0x13, 0x34, 0x58, 0x03, 0x00, 0x00, 0x8C, 0x3D, 0xF7, 0x70, 0x5E, 0x03, 0x00, 0x00, 0xF7, 0x81, 0x39, 0x79, 0x6F, 0x03, 0x00, 0x00, 0x6C, 0x1B, 0x8D, 0xAD, 0x84, 0x03, 0x00, 0x00, 0x52, 0xBC, 0xB7, 0x15, 0x9A, 0x03, 0x00, 0x00, 0x67, 0x38, 0x36, 0x45, 0xAB, 0x03, 0x00, 0x00, 0x5A, 0x05, 0x0D, 0x97, 0xB2, 0x03, 0x00, 0x00, 0x80, 0x8A, 0x61, 0xDC, 0xB9, 0x03, 0x00, 0x00, 0xC5, 0x96, 0x94, 0x4F, 0xCD, 0x03, 0x00, 0x00, 0xCF, 0xC4, 0xC0, 0x3D, 0xF0, 0x03, 0x00, 0x00, 0xBD, 0x81, 0x6B, 0x91, 0xFB, 0x03, 
                0x00, 0x00, 0x22, 0x17, 0xCB, 0x4A, 0x0C, 0x04, 0x00, 0x00, 0x1E, 0x65, 0xBB, 0x4E, 0x1D, 0x04, 0x00, 0x00, 0x6D, 0xFB, 0xB5, 0x28, 0x24, 0x04, 0x00, 0x00, 0x42, 0x39, 0xDE, 0x48, 0x36, 0x04, 0x00, 0x00, 0x44, 0x82, 0xAE, 0x12, 0x3E, 0x04, 0x00, 0x00, 0xB7, 0x4B, 0x05, 0xEC, 0x4E, 0x04, 0x00, 0x00, 0x9F, 0xFC, 0xE2, 0x96, 0x5D, 0x04, 0x00, 0x00, 0xE2, 0x77, 0x80, 0x64, 0x82, 0x04, 0x00, 0x00, 0x16, 0xAD, 0x6D, 0xAD, 0x93, 0x04, 0x00, 0x00, 0xA9, 0x7E, 0xF1, 0x60, 0xA9, 0x04, 0x00, 0x00, 0x89, 0x3C, 0x39, 0xC8, 0xC0, 0x04, 0x00, 0x00, 0x5D, 0x32, 0x32, 0xA2, 0xC7, 0x04, 0x00, 0x00, 
                0xB4, 0x62, 0x95, 0x8F, 0xD7, 0x04, 0x00, 0x00, 0xC3, 0x4A, 0x5F, 0xA1, 0xE2, 0x04, 0x00, 0x00, 0xE2, 0xAB, 0x95, 0x91, 0xF2, 0x04, 0x00, 0x00, 0x44, 0x53, 0xE5, 0x62, 0xF8, 0x04, 0x00, 0x00, 0x21, 0x73, 0x35, 0xE2, 0xFE, 0x04, 0x00, 0x00, 0x79, 0xFD, 0x7D, 0x3E, 0x23, 0x05, 0x00, 0x00, 0x9F, 0x70, 0x1F, 0x51, 0x32, 0x05, 0x00, 0x00, 0x6C, 0x70, 0x04, 0x9A, 0x58, 0x05, 0x00, 0x00, 0x0B, 0x5A, 0x08, 0x85, 0x7F, 0x05, 0x00, 0x00, 0x6B, 0x14, 0x0E, 0xA4, 0xA7, 0x05, 0x00, 0x00, 0xD9, 0x10, 0x94, 0x83, 0xCE, 0x05, 0x00, 0x00, 0xD3, 0x59, 0xB4, 0xD6, 0xF3, 0x05, 0x00, 0x00, 0x33, 0xBA, 0xC6, 0x66, 0x19, 0x06, 0x00, 0x00, 0xC1, 0x27, 0xA1, 0xF3, 0x3E, 0x06, 0x00, 0x00, 0x23, 0xAE, 0xB4, 0x42, 0x67, 0x06, 0x00, 0x00, 0x83, 0x76, 0x8E, 0x6E, 0x91, 0x06, 0x00, 0x00, 0x51, 
                0x03, 0x56, 0x68, 0xBA, 0x06, 0x00, 0x00, 0x61, 0x46, 0xD7, 0x49, 0xD7, 0x06, 0x00, 0x00, 0x7D, 0xC9, 0x56, 0xED, 0xF5, 0x06, 0x00, 0x00, 0xAF, 0xBC, 0x77, 0x20, 0x12, 0x07, 0x00, 0x00, 0x9E, 0x93, 0x1C, 0x77, 0x38, 0x07, 0x00, 0x00, 0x28, 0x8D, 0xDD, 0x67, 0x5F, 0x07, 0x00, 0x00, 0xD4, 0x60, 0xCD, 0x7C, 0x85, 0x07, 0x00, 0x00, 0xB8, 0xF3, 0x59, 0x08, 0x9F, 0x07, 0x00, 0x00, 0x97, 0x5C, 0xB6, 0x6C, 0xBA, 0x07, 0x00, 0x00, 0x5C, 0xED, 0xAE, 0xFA, 0xD5, 0x07, 0x00, 0x00, 0x5C, 0x6B, 0xD8, 0xAE, 0xF6, 0x07, 0x00, 0x00, 0xBA, 0xC0, 0x03, 0x67, 0x18, 0x08, 0x00, 0x00, 0x52, 0x40, 0x21, 0x3A, 0x39, 0x08, 0x00, 0x00, 0x65, 0xE6, 0x56, 0x03, 0x5A, 0x08, 0x00, 0x00, 0xB0, 0xA6, 0x93, 0xEA, 0x66, 0x08, 0x00, 0x00, 0x67, 0x43, 0x5E, 0xB6, 0x6D, 0x08, 0x00, 0x00, 0xF1, 0x1B, 
                0x2D, 0x36, 0x8F, 0x08, 0x00, 0x00, 0x1B, 0x19, 0xF5, 0xEB, 0xB0, 0x08, 0x00, 0x00, 0x5A, 0xBF, 0xDA, 0xBA, 0xD1, 0x08, 0x00, 0x00, 0x34, 0x68, 0xA1, 0x25, 0xF3, 0x08, 0x00, 0x00, 0x48, 0x20, 0x4C, 0x81, 0x14, 0x09, 0x00, 0x00, 0x5E, 0xB3, 0xA1, 0x16, 0x2E, 0x09, 0x00, 0x00, 0xE8, 0x16, 0x79, 0xEC, 0x49, 0x09, 0x00, 0x00, 0x94, 0xFA, 0x0B, 0x4B, 0x63, 0x09, 0x00, 0x00, 0xEC, 0x2A, 0xB6, 0x14, 0x80, 0x09, 0x00, 0x00, 0xCE, 0xEC, 0xCA, 0x06, 0x99, 0x09, 0x00, 0x00, 0xC0, 0xD8, 0x78, 0x2A, 0xBC, 0x09, 0x00, 0x00, 0xF9, 0x8D, 0x2B, 0xB1, 0xE0, 0x09, 0x00, 0x00, 0xAD, 0xA5, 0x69, 0x6B, 0x00, 0x0A, 0x00, 0x00, 0x6B, 0x95, 0x31, 0x94, 0x12, 0x0A, 0x00, 0x00, 0xEB, 0x8C, 0x36, 0x45, 0x1D, 0x0A, 0x00, 0x00, 0xE3, 0x97, 0x65, 0x98, 0x26, 0x0A, 0x00, 0x00, 0xF7, 0x74, 0xAC, 
                0x2B, 0x31, 0x0A, 0x00, 0x00, 0x4A, 0xCB, 0xA3, 0x69, 0x43, 0x0A, 0x00, 0x00, 0xE8, 0x52, 0x8F, 0xB2, 0x5A, 0x0A, 0x00, 0x00, 0x4F, 0x9E, 0xE8, 0xCE, 0x66, 0x0A, 0x00, 0x00, 0x31, 0x93, 0x2D, 0x24, 0x7A, 0x0A, 0x00, 0x00, 0x34, 0xDA, 0xB3, 0x36, 0x88, 0x0A, 0x00, 0x00, 0x49, 0x08, 0x29, 0xCD, 0x9D, 0x0A, 0x00, 0x00, 0xFE, 0x70, 0xA4, 0x56, 0xB5, 0x0A, 0x00, 0x00, 0x70, 0x00, 0xC6, 0x1C, 0xBB, 0x0A, 0x00, 0x00, 0xF8, 0x0B, 0x1B, 0x4D, 0xCD, 0x0A, 0x00, 0x00, 0x59, 0x69, 0x25, 0xD8, 0xD6, 0x0A, 0x00, 0x00, 0x92, 0xE2, 0x48, 0xB7, 0xE9, 0x0A, 0x00, 0x00, 0xAB, 0xA1, 0xAA, 0x33, 0xFD, 0x0A, 0x00, 0x00, 0xE1, 0x0C, 0x1C, 0xBE, 0x1F, 0x0B, 0x00, 0x00, 0x4A, 0x87, 0x1E, 0xE4, 0x41, 0x0B, 0x00, 0x00, 0xB3, 0x01, 0x21, 0x0A, 0x63, 0x0B, 0x00, 0x00, 0x71, 0xC8, 0x83, 0x89, 
                0x83, 0x0B, 0x00, 0x00, 0x9B, 0x8A, 0x41, 0x05, 0xA2, 0x0B, 0x00, 0x00, 0x48, 0x2D, 0xB1, 0xE4, 0xB9, 0x0B, 0x00, 0x00, 0xE5, 0x32, 0x76, 0xD8, 0xD3, 0x0B, 0x00, 0x00, 0x33, 0xEF, 0x70, 0xE3, 0xE4, 0x0B, 0x00, 0x00, 0xDB, 0x78, 0x46, 0x0E, 0x06, 0x0C, 0x00, 0x00, 0x5C, 0x10, 0xC7, 0xD0, 0x24, 0x0C, 0x00, 0x00, 0x37, 0xE5, 0xB5, 0x68, 0x44, 0x0C, 0x00, 0x00, 0xCB, 0x77, 0x09, 0xBB, 0x5E, 0x0C, 0x00, 0x00, 0x9C, 0xF8, 0x00, 0x68, 0x7C, 0x0C, 0x00, 0x00, 0xE8, 0x32, 0x20, 0x3E, 0x98, 0x0C, 0x00, 0x00, 0x7E, 0x1C, 0x9A, 0xCD, 0xB5, 0x0C, 0x00, 0x00, 0xDD, 0x82, 0xF5, 0x9E, 0xD6, 0x0C, 
                0x00, 0x00, 0xED, 0x48, 0xA7, 0x3E, 0xF5, 0x0C, 0x00, 0x00, 0xCC, 0x4A, 0x67, 0x38, 0x1A, 0x0D, 0x00, 0x00, 0x3D, 0x0C, 0xCF, 0xEF, 0x2F, 0x0D, 0x00, 0x00, 0xB7, 0x08, 0x32, 0x99, 0x47, 0x0D, 0x00, 0x00, 0x62, 0xAD, 0x10, 0xAC, 0x60, 0x0D, 0x00, 0x00, 0x9C, 0xD1, 0xEE, 0x8F, 0x7A, 0x0D, 0x00, 0x00, 0x54, 0x2B, 0x32, 0xC4, 0x8C, 0x0D, 0x00, 0x00, 0xD0, 0x61, 0xAA, 0x5F, 0x99, 0x0D, 0x00, 0x00, 0xB9, 0x77, 0xFF, 0x5C, 0xA0, 0x0D, 0x00, 0x00, 0xEE, 0x4C, 0x0A, 0x48, 0xAC, 0x0D, 0x00, 0x00, 0xF9, 0x43, 0xC2, 0x1E, 0xB1, 0x0D, 0x00, 0x00, 0x70, 0x08, 0xA5, 0xAB, 0xBD, 0x0D, 0x00, 0x00, 0x47, 0x8A, 0x8C, 0xA7, 0xE0, 0x0D, 0x00, 0x00, 0x87, 0x7A, 0x10, 0xDD, 0x04, 0x0E, 0x00, 0x00, 0xFD, 0xAF, 0x9F, 0xD1, 0x27, 0x0E, 0x00, 0x00, 0x40, 0x70, 0xD7, 0x6D, 0x43, 0x0E, 0x00, 
                0x00, 0x49, 0x91, 0x65, 0x7D, 0x4F, 0x0E, 0x00, 0x00, 0x60, 0x2A, 0x42, 0x64, 0x60, 0x0E, 0x00, 0x00, 0x18, 0x02, 0x3D, 0xF7, 0x6B, 0x0E, 0x00, 0x00, 0xBF, 0x0D, 0x2D, 0x02, 0x74, 0x0E, 0x00, 0x00, 0x32, 0x62, 0x83, 0x46, 0x7E, 0x0E, 0x00, 0x00, 0x93, 0x8C, 0xAC, 0x27, 0xB1, 0x0E, 0x00, 0x00, 0xF3, 0x95, 0x03, 0x46, 0xE5, 0x0E, 0x00, 0x00, 0x81, 0xD4, 0x52, 0x73, 0x18, 0x0F, 0x00, 0x00, 0x43, 0xE5, 0x8D, 0x7C, 0x2E, 0x0F, 0x00, 0x00, 0xCD, 0xAD, 0x07, 0x95, 0x50, 0x0F, 0x00, 0x00, 0xF3, 0x48, 0x2F, 0xF1, 0x6D, 0x0F, 0x00, 0x00, 0x80, 0xE6, 0x26, 0x71, 0x7B, 0x0F, 0x00, 0x00, 0x10, 0xB5, 0x1D, 0x16, 0x9F, 0x0F, 0x00, 0x00, 0x41, 0xE5, 0xF2, 0xAE, 0xB2, 0x0F, 0x00, 0x00, 0x2A, 0x62, 0x92, 0x89, 0xBB, 0x0F, 0x00, 0x00, 0x5D, 0x8D, 0x76, 0xBF, 0xCC, 0x0F, 0x00, 0x00, 
                0xA3, 0x3D, 0x4F, 0x72, 0xD6, 0x0F, 0x00, 0x00, 0x70, 0x1A, 0x6C, 0x2B, 0xE7, 0x0F, 0x00, 0x00, 0x8C, 0x0B, 0x1E, 0x8E, 0xF2, 0x0F, 0x00, 0x00, 0x98, 0x39, 0x79, 0x28, 0x05, 0x10, 0x00, 0x00, 0xBF, 0xC9, 0xDA, 0x61, 0x0A, 0x10, 0x00, 0x00, 0xB6, 0x00, 0x00, 0x00, 0x44, 0x10, 0x00, 0x00, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x0B, 0x00, 0x00, 0x7C, 0x0B, 0x00, 0x00, 0x3E, 0xE3, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x33, 0x00, 0x00, 0xCC, 0x33, 0x00, 0x00, 0xD9, 0xE9, 0xA6, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 
                0x21, 0x00, 0x00, 0xA2, 0x21, 0x00, 0x00, 0x9A, 0xAF, 0x2F, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x55, 0x00, 0x00, 0x38, 0x55, 0x00, 0x00, 0xA0, 0x5C, 0xF4, 0xB6, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x22, 0x00, 0x00, 0xCE, 0x22, 0x00, 0x00, 0x48, 0xEA, 0x2F, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC3, 0x00, 0x00, 0xC6, 0xC3, 0x00, 0x00, 0x3D, 0x28, 0x98, 0xE7, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5E, 0x86, 0x00, 
                0x00, 0x5E, 0x86, 0x00, 0x00, 0x72, 0x56, 0xC7, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x32, 0x00, 0x00, 0xFA, 0x32, 0x00, 0x00, 0xCB, 0xD6, 0xDF, 0x48, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xCB, 0x00, 0x00, 0x7C, 0xCB, 0x00, 0x00, 0x2F, 0x13, 0x2E, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDA, 0xBB, 0x00, 0x00, 0xDA, 0xBB, 0x00, 0x00, 0xFE, 0xC3, 0xF2, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x38, 0x00, 0x00, 0xEE, 0x38, 0x00, 0x00, 0xC1, 0x2A, 0x27, 0x5B, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x72, 0x00, 0x00, 0x18, 0x72, 0x00, 0x00, 0x38, 0xA2, 0x02, 0xF4, 
                0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF2, 0x76, 0x00, 0x00, 0xF2, 0x76, 0x00, 0x00, 0xF4, 0xF3, 0x0B, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x54, 0x00, 0x00, 0xE4, 0x54, 0x00, 0x00, 0xBE, 0xFA, 0x6D, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x5F, 0x00, 0x00, 0x94, 0x5F, 0x00, 0x00, 0xB5, 0x12, 0xD9, 0x72, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x63, 0x00, 0x00, 0x84, 0x63, 0x00, 0x00, 0x5A, 0x7F, 0x13, 0x19, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x96, 0x01, 0x00, 0x68, 0x96, 0x01, 0x00, 0xAA, 0x01, 0x2A, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0xC6, 0xD2, 0x00, 0x00, 0xC6, 0xD2, 0x00, 0x00, 0xC5, 0x06, 0x44, 0xEE, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x15, 0x01, 0x00, 0x56, 0x15, 0x01, 0x00, 0xEC, 0x7C, 0x90, 0x9D, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x49, 0x00, 0x00, 0x2C, 0x49, 0x00, 0x00, 0x4D, 0x5A, 0xF2, 0x57, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x4B, 0x00, 0x00, 0xDE, 0x4B, 0x00, 0x00, 0x91, 0xB9, 0x70, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xA6, 0x00, 0x00, 0x14, 0xA6, 0x00, 0x00, 0x62, 0x09, 0xCE, 0x60, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x45, 0x00, 0x00, 0x06, 0x45, 
                0x00, 0x00, 0xDD, 0xC0, 0xBF, 0x30, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x6D, 0x74, 0x97, 0x12, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x57, 0x00, 0x00, 0x24, 0x57, 0x00, 0x00, 0x1E, 0x3F, 0x28, 0xB9, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x1B, 0x00, 0x00, 0x30, 0x1B, 0x00, 0x00, 0xD3, 0x3F, 0xCF, 0x86, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x50, 0x00, 0x00, 0x94, 0x50, 0x00, 0x00, 0x17, 0x1E, 0x4E, 0x25, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x4A, 0x00, 0x00, 0x8E, 0x4A, 0x00, 0x00, 0x0E, 0xB7, 0xA1, 0xB4, 0x00, 0x00, 0x00, 
                0x00, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x37, 0x00, 0x00, 0x7A, 0x37, 0x00, 0x00, 0x09, 0xA9, 0x6E, 0x42, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x3C, 0x00, 0x00, 0xA8, 0x3C, 0x00, 0x00, 0xD1, 0x88, 0xE7, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x51, 0x00, 0x00, 0xCC, 0x51, 0x00, 0x00, 0xBA, 0xE1, 0xB6, 0xCE, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x2B, 0x00, 0x00, 0x3E, 0x2B, 0x00, 0x00, 0x31, 0x6D, 0x48, 0x53, 0x00, 0x00, 0x00, 0x00, 0x21, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x28, 0x00, 0x00, 0x62, 0x28, 0x00, 0x00, 0xA3, 0x47, 0x62, 0x4B, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x65, 0x00, 0x00, 0x10, 0x65, 0x00, 0x00, 0x5A, 0x9B, 0x17, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x45, 0x00, 0x00, 0x54, 0x45, 0x00, 0x00, 0x96, 0xDD, 0xB5, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8A, 0x4E, 0x00, 0x00, 0x8A, 0x4E, 0x00, 0x00, 0x0D, 0x84, 0x0B, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x81, 0x00, 0x00, 0xEA, 0x81, 0x00, 0x00, 0x20, 0xB5, 0xB2, 0xEF, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x20, 
                0x00, 0x00, 0x94, 0x20, 0x00, 0x00, 0x00, 0x29, 0x67, 0xD1, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x44, 0x00, 0x00, 0x2E, 0x44, 0x00, 0x00, 0x68, 0xFF, 0xF1, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF2, 0x48, 0x01, 0x00, 0xF2, 0x48, 0x01, 0x00, 0xD3, 0x6B, 0xE8, 0x72, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x5A, 0x00, 0x00, 0xFF, 0x5A, 0x00, 0x00, 0x58, 0x3D, 0x56, 0xA4, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x51, 0x00, 0x00, 0xF0, 0x51, 0x00, 0x00, 0x58, 0xFE, 0xAD, 0x09, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD4, 0x52, 0x00, 0x00, 0xD4, 0x52, 0x00, 0x00, 0x24, 0xC6, 0x95, 
                0x6A, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD6, 0x9B, 0x00, 0x00, 0xD6, 0x9B, 0x00, 0x00, 0x93, 0xAC, 0x5F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x3A, 0x01, 0x00, 0x2E, 0x3A, 0x01, 0x00, 0x0D, 0xB5, 0x68, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x27, 0x00, 0x00, 0x6C, 0x27, 0x00, 0x00, 0x54, 0xEA, 0xFB, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x49, 0x00, 0x00, 0x62, 0x49, 0x00, 0x00, 0xA7, 0xFB, 0xBA, 0x61, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0xC1, 0x00, 0x00, 0x74, 0xC1, 0x00, 0x00, 0x5F, 0x3B, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x12, 0x2D, 0x00, 0x00, 0x12, 0x2D, 0x00, 0x00, 0xB5, 0xAB, 0x6F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x15, 0x00, 0x00, 0x12, 0x15, 0x00, 0x00, 0x87, 0xBD, 0xB7, 0x63, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x14, 0x01, 0x00, 0xF0, 0x14, 0x01, 0x00, 0xD9, 0x05, 0xF4, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x5B, 0x00, 0x00, 0x44, 0x5B, 0x00, 0x00, 0x21, 0xC5, 0x55, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0xA2, 0x54, 0x00, 0x00, 0xA2, 0x54, 0x00, 0x00, 0x30, 0x16, 0x48, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x29, 0x00, 0x00, 0x8E, 0x29, 0x00, 0x00, 0x0B, 0xCF, 0x61, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x3C, 0x01, 0x00, 0xFE, 0x3C, 0x01, 0x00, 0x0A, 0xC2, 0x89, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xDB, 0x00, 0x00, 0x4E, 0xDB, 0x00, 0x00, 0xAF, 0xE1, 0xD5, 0x64, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0x69, 0x00, 0x00, 0xF3, 0x69, 0x00, 0x00, 0x8F, 0x77, 0x59, 0x98, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x3A, 0x00, 0x00, 0x4A, 0x3A, 0x00, 
                0x00, 0xA4, 0xF2, 0x65, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x2C, 0x01, 0x00, 0x48, 0x2C, 0x01, 0x00, 0x0D, 0x7D, 0x9D, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x77, 0x00, 0x00, 0xA6, 0x77, 0x00, 0x00, 0x5B, 0xE1, 0x56, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x73, 0x00, 0x00, 0xE6, 0x73, 0x00, 0x00, 0xC5, 0x3F, 0xEA, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x43, 0x01, 0x00, 0x10, 0x43, 0x01, 0x00, 0xDC, 0xB4, 0xDA, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x51, 0x00, 0x00, 0x42, 0x51, 0x00, 0x00, 0x08, 0x25, 0x33, 0xC9, 0x00, 0x00, 0x00, 0x00, 
                0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6A, 0x2C, 0x00, 0x00, 0x6A, 0x2C, 0x00, 0x00, 0xCC, 0x21, 0xF4, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x3D, 0x00, 0x00, 0x44, 0x3D, 0x00, 0x00, 0x79, 0x33, 0x1C, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0xAF, 0x01, 0x00, 0x9A, 0xAF, 0x01, 0x00, 0xB0, 0x12, 0xE3, 0xD9, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0x38, 0x00, 0x00, 0xE2, 0x38, 0x00, 0x00, 0x9D, 0x63, 0x16, 0x24, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0xC8, 0x00, 0x00, 0xE8, 0xC8, 0x00, 0x00, 0x4F, 0xD5, 0xF7, 0x6A, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 
                0x97, 0x00, 0x00, 0x0E, 0x97, 0x00, 0x00, 0x94, 0x94, 0x94, 0xC9, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x60, 0x00, 0x00, 0x12, 0x60, 0x00, 0x00, 0x96, 0x23, 0x6E, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x60, 0x00, 0x00, 0xBA, 0x60, 0x00, 0x00, 0x91, 0xC4, 0xDB, 0x69, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3D, 0x00, 0x00, 0x38, 0x3D, 0x00, 0x00, 0x7D, 0xE1, 0xBB, 0x42, 0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x46, 0x00, 0x00, 0xF8, 0x46, 0x00, 0x00, 0xBB, 0x33, 0x8A, 0x38, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x41, 0x00, 0x00, 0x0A, 0x41, 0x00, 0x00, 0xF9, 0xA7, 
                0x7D, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x38, 0x00, 0x00, 0x28, 0x38, 0x00, 0x00, 0xA9, 0x18, 0xDE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x4E, 0x00, 0x00, 0x66, 0x4E, 0x00, 0x00, 0x8D, 0xE2, 0xB5, 0x13, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x0B, 0x02, 0x00, 0x38, 0x0B, 0x02, 0x00, 0x91, 0xC3, 0xFB, 0x85, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x2C, 0x00, 0x00, 0x58, 0x2C, 0x00, 0x00, 0xA0, 0x17, 0x5B, 0x0C };
            using (MemoryStream ms = new MemoryStream(data))
            using (BinaryReader br = new BinaryReader(ms))
            {
                W2AnimFile = new CR2WFile();
                W2AnimFile.Read(br);
                createAnimationSet();
                for (int i = 0; i < files.Count(); i++)
                {
                    string filename = files[i];
                    int startIndex = (i * 3); // each aniamtion in the set has 3 chunks (for now)
                    int bufferNumber = i + 1;
                    createChunks(startIndex, bufferNumber);
                    ReadAnims loadedAnim;
                    List<Bone> bonelist;
                    using (StreamReader r = new StreamReader(filename))
                    {
                        string json = r.ReadToEnd();
                        loadedAnim = JsonConvert.DeserializeObject<ReadAnims>(json);
                        bonelist = loadedAnim.bones;
                    }

                    var skeletalAnimation = w2AnimFile.Chunks[startIndex + 2].data as CSkeletalAnimation;
                    var buffer = W2AnimFile.Chunks[startIndex + 3].data as CAnimationBufferBitwiseCompressed;

                    skeletalAnimation.Name.SetValue(loadedAnim.name);
                    skeletalAnimation.Duration.SetValue(loadedAnim.duration);
                    buffer.Duration.SetValue(loadedAnim.duration);
                    buffer.NumFrames.SetValue(loadedAnim.numFrames);
                    CByteArray fallbackData = buffer.FallbackData;
                    CByteArray dataData = buffer.Data;

                    int ibx = 0;
                    foreach (var bone in buffer.Bones)
                    {
                        var positionVar = bone.Position;
                        var orientationVar = bone.Orientation;
                        var scaleVar = bone.Scale;

                        positionVar.NumFrames.SetValue((ushort)bonelist[ibx].positionFrames.Count);
                        orientationVar.NumFrames.SetValue((ushort)bonelist[ibx].rotationFrames.Count);
                        scaleVar.NumFrames.SetValue((ushort)bonelist[ibx].scaleFrames.Count);

                        positionVar.Dt.SetValue((ushort)bonelist[ibx].position_dt);
                        orientationVar.Dt.SetValue((ushort)bonelist[ibx].rotation_dt);
                        scaleVar.Dt.SetValue((ushort)bonelist[ibx].scale_dt);

                        ibx++;
                    }

                    byte[] bufferData = getBuffer(buffer, bonelist, "dataAddr");
                    byte[] fallback = getBuffer(buffer, bonelist, "dataAddrFallback");

                    fallbackData.SetValue(fallback);
                    dataData.SetValue(bufferData);
                    saveToFileBuffer(bufferData, savefileName + "."+ bufferNumber +".buffer");
                }
                saveToFile(savefileName);
            }
        }

        private float HalfFloat(float x)// testing precision
        {
            float single_24;
            float single_16;
            byte[] bA3 = BitConverter.GetBytes(x);

            var pad = 0;
            var b1 = (uint)bA3[1];
            var b2 = (uint)bA3[2];
            var b3 = (uint)bA3[3];
            var bits_24 = ((uint)b3 << 24) | ((uint)b2 << 16) | ((uint)b1 << 8) | ((uint)pad);
            var bits_16 = ((uint)b3 << 24) | ((uint)b2 << 16) | ((uint)pad) | ((uint)pad);
            single_24 = BitConverter.ToSingle(BitConverter.GetBytes(bits_24), 0);
            single_16 = BitConverter.ToSingle(BitConverter.GetBytes(bits_16), 0);
            byte[] bAsingle_24 = BitConverter.GetBytes(single_24);
            byte[] bAsingle_16 = BitConverter.GetBytes(single_16);
            return single_24;
        }

        private byte[] getBuffer(CAnimationBufferBitwiseCompressed chunk, List<Bone> bonelist, string dataAddr)
        {
            Dictionary<string, uint> dataAddrDict = new Dictionary<string, uint>();
            //dataAddrDict.Clear();
            byte[] bufferData = new byte[0];
            int ibx = 0;
            foreach (var bone in chunk.Bones)
            {
                CUInt32 dataAddrPos = bone.Position.DataAddr;
                CUInt32 dataAddrRot = bone.Orientation.DataAddr;
                CUInt32 dataAddrScale = bone.Scale.DataAddr;

                //TODO position compression levels? Seems to just involve shaving off float bytes to 24-bit or 16-bit and accepting the precision loss
                byte[] posData = new byte[0];
                if (bonelist[ibx].positionFrames.Count == 1)
                {
                    bone.Position.Compression.SetValue((sbyte)2);
                    Vector pos = bonelist[ibx].positionFrames[0];
                    byte[] bA1 = BitConverter.GetBytes(HalfFloat(pos.x));
                    byte[] bA2 = BitConverter.GetBytes(HalfFloat(pos.y));
                    byte[] bA3 = BitConverter.GetBytes(HalfFloat(pos.z));
                    posData = Combine(posData, new byte[] { bA1[2], bA1[3] });
                    posData = Combine(posData, new byte[] { bA2[2], bA2[3] });
                    posData = Combine(posData, new byte[] { bA3[2], bA3[3] });
                } else {
                    bone.Position.Compression.SetValue((sbyte)1);
                    for (int i = 0; i < bonelist[ibx].positionFrames.Count; i++)
                    {
                        Vector pos = bonelist[ibx].positionFrames[i];
                        byte[] bA1 = BitConverter.GetBytes(HalfFloat(pos.x));
                        byte[] bA2 = BitConverter.GetBytes(HalfFloat(pos.y));
                        byte[] bA3 = BitConverter.GetBytes(HalfFloat(pos.z));
                        posData = Combine(posData, new byte[] { bA1[1], bA1[2], bA1[3] });
                        posData = Combine(posData, new byte[] { bA2[1], bA2[2], bA2[3] });
                        posData = Combine(posData, new byte[] { bA3[1], bA3[2], bA3[3] });
                        if (dataAddr == "dataAddrFallback")
                            break;
                    }
                }
                string posKey = string.Join(":", posData);
                if (!dataAddrDict.ContainsKey(posKey))
                {
                    //set the address to use for all
                    dataAddrDict.Add(posKey, (uint)bufferData.Length);
                    if (dataAddrPos != null)
                        dataAddrPos.SetValue(dataAddrDict[posKey]);
                    bufferData = Combine(bufferData, posData);

                }
                else
                {
                    //get the address
                    if (dataAddrPos != null)
                        dataAddrPos.SetValue(dataAddrDict[posKey]);
                }

                ///>>>>>>>>>>>>>>> ROTATION
                byte[] rotData = new byte[0];
                for (int i = 0; i < bonelist[ibx].rotationFrames.Count; i++)
                {
                    Quaternion rot = bonelist[ibx].rotationFrames[i];
                    ulong compress = getBits(getShort(rot.X), getShort(rot.Y), getShort(rot.Z), getShort(-rot.W));
                    byte[] bA = BitConverter.GetBytes(compress);
                    byte[] bA2 = new byte[] { bA[5], bA[4], bA[3], bA[2], bA[1], bA[0] };
                    rotData = Combine(rotData, bA2);
                    if (dataAddr == "dataAddrFallback")
                        break;
                }
                string rotKey = string.Join(":", rotData);
                if (!dataAddrDict.ContainsKey(rotKey))
                {
                    //set the address to use for all
                    dataAddrDict.Add(rotKey, (uint)bufferData.Length);
                    if (dataAddrRot != null)
                        dataAddrRot.SetValue(dataAddrDict[rotKey]);
                    bufferData = Combine(bufferData, rotData);
                }
                else
                {
                    //get the address
                    if (dataAddrRot != null)
                        dataAddrRot.SetValue(dataAddrDict[rotKey]);
                }

                ///SCALE
                byte[] scaleData = new byte[0];
                for (int i = 0; i < bonelist[ibx].scaleFrames.Count; i++)
                {
                    //80 3F 80 3F 80
                    Vector scl = bonelist[ibx].scaleFrames[i];
                    byte[] bA1 = BitConverter.GetBytes(scl.x);
                    byte[] bA2 = BitConverter.GetBytes(scl.y);
                    byte[] bA3 = BitConverter.GetBytes(scl.z);
                    scaleData = Combine(scaleData, new byte[] { bA1[2], bA1[3] });
                    scaleData = Combine(scaleData, new byte[] { bA2[2], bA2[3] });
                    scaleData = Combine(scaleData, new byte[] { bA3[2], bA3[3] });

                    bone.Scale.Compression.SetValue((sbyte)2);
                    if (dataAddr == "dataAddrFallback")
                        break;
                }

                string scaleKey = string.Join(":", scaleData);
                if (!dataAddrDict.ContainsKey(scaleKey))
                {
                    //set the address to use for all
                    dataAddrDict.Add(scaleKey, (uint)bufferData.Length);
                    if (dataAddrScale != null)
                        dataAddrScale.SetValue(dataAddrDict[scaleKey]);
                    bufferData = Combine(bufferData, scaleData);
                }
                else
                {
                    //get the address
                    if (dataAddrScale != null)
                        dataAddrScale.SetValue(dataAddrDict[scaleKey]);
                }

                ibx++;
            }
            return bufferData;
        }

        private static ushort getShort(float v)
        {
            float quart = (v * -2048.0f) + 2047.0f;
            return (ushort)quart;
        }
        private static ulong getBits(ushort a, ushort b, ushort c, ushort d)
        {
            return (ulong)a << 36 | (ulong)b << 24 | (ulong)c << 12 | (ulong)d;
        }

        private void saveToFile(string FileName)
        {
            try
            {
                using (var mem = new MemoryStream())
                {
                    using (var writer = new BinaryWriter(mem))
                    {
                        W2AnimFile.Write(writer);
                        W2AnimFile.Write(writer);//need to run Write twice or there are issues with CNames?
                        mem.Seek(0, SeekOrigin.Begin);

                        using (var fs = new FileStream(FileName, FileMode.Create, FileAccess.Write))
                        {
                            mem.WriteTo(fs);
                            fs.Close();
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Failed to save the file(s)! They are probably in use.\n" + e.ToString());
            }
        }

        private void saveToFileBuffer(byte[] ba, string FileName)
        {
            try
            {
                using (var mem = new MemoryStream())
                {
                    using (var writer = new BinaryWriter(mem))
                    {
                        writer.Write(ba);
                        mem.Seek(0, SeekOrigin.Begin);
                        using (var fs = new FileStream(FileName, FileMode.Create, FileAccess.Write))
                        {
                            mem.WriteTo(fs);
                            fs.Close();
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Failed to save the file(s)! They are probably in use.\n" + e.ToString());
            }
        }
    }
    public class Vector
    {
        public float x;
        public float y;
        public float z;
        public Vector(float X, float Y, float Z)
        {
            x = X;
            y = Y;
            z = Z;
        }
    }

    public class ReadAnims
    {
        public List<Bone> bones = new List<Bone>();
        public float dt;
        public float duration;
        public string name;
        public uint numFrames;
    };
    public class Bone
    {
        public int index = 0;
        public string BoneName = "????";
        public float position_dt = 0;
        public uint position_dataAddr = 0;
        public uint position_dataAddrFallback = 0;
        public ushort position_numFrames = 0;
        public List<Vector> positionFrames = new List<Vector>();
        public float rotation_dt = 0;
        public uint rotation_dataAddr = 0;
        public uint rotation_dataAddrFallback = 0;
        public ushort rotation_numFrames = 0;
        public List<Quaternion> rotationFrames = new List<Quaternion>();
        public float scale_dt = 0;
        public uint scale_dataAddr = 0;
        public uint scale_dataAddrFallback = 0;
        public ushort scale_numFrames = 0;
        public List<Vector> scaleFrames = new List<Vector>();
    }

}